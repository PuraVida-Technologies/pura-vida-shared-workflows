name: PuraVida Build and Push
on:
  push:
    tags-ignore:
      - '**'
    branches:
      - 'puravida-staging'
  pull_request:
    branches:
      - 'puravida-staging'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  ARTIFACT_REGISTRY_LOCATION: ${{ vars.ARTIFACT_REGISTRY_LOCATION }}
  ADMIN_FRONTEND_APP_NAME: "lamassu-admin-frontend"
  ADMIN_BACKEND_APP_NAME: "lamassu-admin-backend"
  ATM_SERVER_APP_NAME: "lamassu-atm-server"
  IMAGE_REPOSITORY: ${{ vars.IMAGE_REPOSITORY }}
  HELM_REPOSITORY: ${{ vars.HELM_REPOSITORY }}
  NODE_VERSION: "14.21.3"

jobs:

  deploy-front-end:
    name: Deploy Front-End
    if: ( github.event.pull_request.merged == true || github.event_name == 'push' )
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.image_push.outputs.image_digest }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        id: cache
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/cache@v3
        with:
          path: new-lamassu-admin/node_modules
          key: ${{ hashFiles('new-lamassu-admin/package-lock.json') }}

      - name: Install Deps
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: new-lamassu-admin/
        run: npm ci

      - name: Lint
        working-directory: new-lamassu-admin/
        run: npm run fix

      - name: Docker Build
        run: |-
          mkdir -p ./dist
          docker build \
            --tag "$ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA" \
            --file "Dockerfiles/admin.Dockerfile" \
            .

      - name: Authenticate w/ Google
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.DEPLOY_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Configure Docker Client
        run: |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker $ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev --quiet

      - name: Push Docker Image
        id: image_push
        run: |-
          ## first we tag & push the git sha as well as the edge tag
          docker tag $ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA"
          docker tag $ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_FRONTEND_APP_NAME:edge"
          docker push "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA"
          docker push "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_FRONTEND_APP_NAME:edge"

          ## second we extract the image digest for the helm upgrade later
          DIGEST=$(gcloud container images describe "$IMAGE_REPOSITORY/$PROJECT_ID/$ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA" --format="value(image_summary.digest)")
          echo "image_digest=$DIGEST" >> $GITHUB_OUTPUT

  deploy-admin-server:
    name: Deploy Admin Server
    if: ( github.event.pull_request.merged == true || github.event_name == 'push' )
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.image_push.outputs.image_digest }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        id: cache
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            new-lamassu-admin/node_modules
          key: ${{ hashFiles('**/package-lock.json') }}

      - name: Install Deps
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          npm ci
          cd new-lamassu-admin/
          npm ci

      - name: Docker Build
        run: |-
          mkdir -p ./dist
          docker build \
            --tag "$ADMIN_BACKEND_APP_NAME:$GITHUB_SHA" \
            --file "Dockerfiles/admin-server.Dockerfile" \
            .

      - name: Authenticate w/ Google
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.DEPLOY_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Configure Docker Client
        run: |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker $ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev --quiet

      - name: Push Docker Image
        id: image_push
        run: |-
          ## first we tag & push the git sha as well as the edge tag
          docker tag $ADMIN_BACKEND_APP_NAME:$GITHUB_SHA "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_BACKEND_APP_NAME:$GITHUB_SHA"
          docker tag $ADMIN_BACKEND_APP_NAME:$GITHUB_SHA "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_BACKEND_APP_NAME:edge"
          docker push "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_BACKEND_APP_NAME:$GITHUB_SHA"
          docker push "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_BACKEND_APP_NAME:edge"

          ## second we extract the image digest for the helm upgrade later
          DIGEST=$(gcloud container images describe "$IMAGE_REPOSITORY/$PROJECT_ID/$ADMIN_BACKEND_APP_NAME:$GITHUB_SHA" --format="value(image_summary.digest)")
          echo "image_digest=$DIGEST" >> $GITHUB_OUTPUT

  deploy-atm-server:
    name: Deploy ATM Server
    if: ( github.event.pull_request.merged == true || github.event_name == 'push' )
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.image_push.outputs.image_digest }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        id: cache
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ hashFiles('package-lock.json') }}

      - name: Install Deps
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Docker Build
        run: |-
          mkdir -p ./dist
          docker build \
            --tag "$ATM_SERVER_APP_NAME:$GITHUB_SHA" \
            --file "Dockerfiles/server.Dockerfile" \
            .

      - name: Authenticate w/ Google
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.DEPLOY_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Configure Docker Client
        run: |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker $ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev --quiet

      - name: Push Docker Image
        id: image_push
        run: |-
          ## first we tag & push the git sha as well as the edge tag
          docker tag $ATM_SERVER_APP_NAME:$GITHUB_SHA "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ATM_SERVER_APP_NAME:$GITHUB_SHA"
          docker tag $ATM_SERVER_APP_NAME:$GITHUB_SHA "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ATM_SERVER_APP_NAME:edge"
          docker push "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ATM_SERVER_APP_NAME:$GITHUB_SHA"
          docker push "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ATM_SERVER_APP_NAME:edge"

          ## second we extract the image digest for the helm upgrade later
          DIGEST=$(gcloud container images describe "$IMAGE_REPOSITORY/$PROJECT_ID/$ATM_SERVER_APP_NAME:$GITHUB_SHA" --format="value(image_summary.digest)")
          echo "image_digest=$DIGEST" >> $GITHUB_OUTPUT

#  build-push-gcr:
#    name: Build and Push to GCP Artifact Repo
#    if: ( github.event.pull_request.merged == true || github.event_name == 'push' )
#    runs-on: ubuntu-latest
#    outputs:
#      digest: ${{ steps.image_push.outputs.image_digest }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Authenticate
#        uses: 'google-github-actions/auth@v1'
#        with:
#          credentials_json: '${{ secrets.DEPLOY_SA_KEY }}'
#
#      - name: Set up Cloud SDK
#        uses: 'google-github-actions/setup-gcloud@v1'
#
#      - name: Unit & E2E Tests
#        run: |-
#          npm install yarn -g
#          yarn install
#          yarn lint
#          yarn run build
#          yarn test
#          yarn test:e2e
#
#      - name: Configure Docker Client
#        run: |-
#          gcloud auth configure-docker --quiet
#          gcloud auth configure-docker $ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev --quiet
#
#      - name: Build Image
#        run: |-
#          docker build \
#            --tag "$ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA" \
#            --build-arg GITHUB_SHA="$GITHUB_SHA" \
#            --build-arg GITHUB_REF="$GITHUB_REF" .
#
#      - name: Push Docker Image to Artifact Registry
#        id: image_push
#        run: |-
#          ## first we tag & push the git sha as well as the edge tag
#          docker tag $ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA"
#          docker tag $ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_FRONTEND_APP_NAME:edge"
#          docker push "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA"
#          docker push "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_REPOSITORY/$ADMIN_FRONTEND_APP_NAME:edge"
#
#          ## second we extract the image digest for the helm upgrade later
#          DIGEST=$(gcloud container images describe "$IMAGE_REPOSITORY/$PROJECT_ID/$ADMIN_FRONTEND_APP_NAME:$GITHUB_SHA" --format="value(image_summary.digest)")
#          echo "image_digest=$DIGEST" >> $GITHUB_OUTPUT
#
#  update-helm-digest:
#    name: Update the helm chart digest
#    needs: build-push-gcr
#    runs-on: ubuntu-latest
#    env:
#      IMAGE_DIGEST: ${{needs.build-push-gcr.outputs.digest}}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: 🏗 Set up yq
#        uses: frenck/action-setup-yq@v1.0.2
#
#      - name: Checkout Helm Repository
#        uses: actions/checkout@master
#        with:
#          repository: ${{ env.HELM_REPOSITORY}}
#          token: ${{ secrets.HELM_REPO_TOKEN }}
#          path: helm-charts
#
#      - uses: actions-ecosystem/action-get-latest-tag@v1
#        id: get-latest-tag
#        with:
#          semver_only: true
#
#      - name: Get old Chart Version
#        run: |
#          V=$(yq '.version' 'helm-charts/charts/${{ env.ADMIN_FRONTEND_APP_NAME }}/Chart.yaml')
#          echo "OLD_CHART_VERSION=$V" >> $GITHUB_ENV
#
#      - name: Set Application & Chart Version
#        run: |
#          TAG_TRIMMED=$(echo "${{ steps.get-latest-tag.outputs.tag }}" | sed -e "s/v//g")
#          echo "APPLICATION_VERSION=$TAG_TRIMMED" >>$GITHUB_ENV
#          if [[ "$OLD_CHART_VERSION" == *"-dev"* ]]; then
#              echo "CHART_VERSION=$OLD_CHART_VERSION" >>$GITHUB_ENV
#          else
#              echo "CHART_VERSION=$TAG_TRIMMED-dev" >>$GITHUB_ENV
#          fi
#
#      - name: Set Image Digest, Chart version & App version
#        run: |
#          yq -i '.image.digest = "${{ env.IMAGE_DIGEST }}"' 'helm-charts/charts/${{ env.ADMIN_FRONTEND_APP_NAME }}/values.yaml'
#          yq -i '.version = "${{ env.CHART_VERSION }}"' 'helm-charts/charts/${{ env.ADMIN_FRONTEND_APP_NAME }}/Chart.yaml'
#          yq -i '.appVersion = "${{ env.APPLICATION_VERSION }}"' 'helm-charts/charts/${{ env.ADMIN_FRONTEND_APP_NAME }}/Chart.yaml'
#
#      - name: Push Helm Chart Repo
#        run: |
#          cd ./helm-charts
#          git add .
#          git config user.name puravida-bot
#          git config user.email bot@pvbtc.cloud
#          git commit -am "chore: Update image digest to $IMAGE_DIGEST"
#          git push